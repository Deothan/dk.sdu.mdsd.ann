/*
 * generated by Xtext 2.11.0
 */
package dk.sdu.mdsd.ann.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AnnGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ANNModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.ANNModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAlphaKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cAlphaAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAlphaDECIMALParserRuleCall_3_0 = (RuleCall)cAlphaAssignment_3.eContents().get(0);
		private final Keyword cEpochsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEpochsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cEpochsINTTerminalRuleCall_5_0 = (RuleCall)cEpochsAssignment_5.eContents().get(0);
		private final Assignment cLayerAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLayerLayerParserRuleCall_6_0 = (RuleCall)cLayerAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ANNModel:
		//	name=ID '{'
		//	'alpha' alpha=DECIMAL
		//	'epochs' epochs=INT
		//	Layer+=Layer+ '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' 'alpha' alpha=DECIMAL 'epochs' epochs=INT Layer+=Layer+ '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'alpha'
		public Keyword getAlphaKeyword_2() { return cAlphaKeyword_2; }
		
		//alpha=DECIMAL
		public Assignment getAlphaAssignment_3() { return cAlphaAssignment_3; }
		
		//DECIMAL
		public RuleCall getAlphaDECIMALParserRuleCall_3_0() { return cAlphaDECIMALParserRuleCall_3_0; }
		
		//'epochs'
		public Keyword getEpochsKeyword_4() { return cEpochsKeyword_4; }
		
		//epochs=INT
		public Assignment getEpochsAssignment_5() { return cEpochsAssignment_5; }
		
		//INT
		public RuleCall getEpochsINTTerminalRuleCall_5_0() { return cEpochsINTTerminalRuleCall_5_0; }
		
		//Layer+=Layer+
		public Assignment getLayerAssignment_6() { return cLayerAssignment_6; }
		
		//Layer
		public RuleCall getLayerLayerParserRuleCall_6_0() { return cLayerLayerParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class DECIMALElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.DECIMAL");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//DECIMAL:
		//	INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class LayerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Layer");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHiddenParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cInputParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOutputParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//Layer:
		//	Hidden | Input | Output;
		@Override public ParserRule getRule() { return rule; }
		
		//Hidden | Input | Output
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Hidden
		public RuleCall getHiddenParserRuleCall_0() { return cHiddenParserRuleCall_0; }
		
		//Input
		public RuleCall getInputParserRuleCall_1() { return cInputParserRuleCall_1; }
		
		//Output
		public RuleCall getOutputParserRuleCall_2() { return cOutputParserRuleCall_2; }
	}
	public class HiddenElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Hidden");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHiddenKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cLearningRuleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cL_ruleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cL_ruleLearningRuleParserRuleCall_5_0 = (RuleCall)cL_ruleAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Hidden:
		//	'hidden' '{'
		//	'size' size=INT
		//	'learningRule' l_rule=LearningRule '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'hidden' '{' 'size' size=INT 'learningRule' l_rule=LearningRule '}'
		public Group getGroup() { return cGroup; }
		
		//'hidden'
		public Keyword getHiddenKeyword_0() { return cHiddenKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'size'
		public Keyword getSizeKeyword_2() { return cSizeKeyword_2; }
		
		//size=INT
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0() { return cSizeINTTerminalRuleCall_3_0; }
		
		//'learningRule'
		public Keyword getLearningRuleKeyword_4() { return cLearningRuleKeyword_4; }
		
		//l_rule=LearningRule
		public Assignment getL_ruleAssignment_5() { return cL_ruleAssignment_5; }
		
		//LearningRule
		public RuleCall getL_ruleLearningRuleParserRuleCall_5_0() { return cL_ruleLearningRuleParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Input:
		//	'in' '{'
		//	'size' size=INT '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'in' '{' 'size' size=INT '}'
		public Group getGroup() { return cGroup; }
		
		//'in'
		public Keyword getInKeyword_0() { return cInKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'size'
		public Keyword getSizeKeyword_2() { return cSizeKeyword_2; }
		
		//size=INT
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0() { return cSizeINTTerminalRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeINTTerminalRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final Keyword cLearningRuleKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cL_ruleAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cL_ruleLearningRuleParserRuleCall_5_0 = (RuleCall)cL_ruleAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Output:
		//	'out' '{'
		//	'size' size=INT
		//	'learningRule' l_rule=LearningRule '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'out' '{' 'size' size=INT 'learningRule' l_rule=LearningRule '}'
		public Group getGroup() { return cGroup; }
		
		//'out'
		public Keyword getOutKeyword_0() { return cOutKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'size'
		public Keyword getSizeKeyword_2() { return cSizeKeyword_2; }
		
		//size=INT
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//INT
		public RuleCall getSizeINTTerminalRuleCall_3_0() { return cSizeINTTerminalRuleCall_3_0; }
		
		//'learningRule'
		public Keyword getLearningRuleKeyword_4() { return cLearningRuleKeyword_4; }
		
		//l_rule=LearningRule
		public Assignment getL_ruleAssignment_5() { return cL_ruleAssignment_5; }
		
		//LearningRule
		public RuleCall getL_ruleLearningRuleParserRuleCall_5_0() { return cL_ruleLearningRuleParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class LearningRuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.LearningRule");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSigmoidParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cThresholdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cCustomParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//LearningRule:
		//	Sigmoid | Threshold | Custom;
		@Override public ParserRule getRule() { return rule; }
		
		//Sigmoid | Threshold | Custom
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sigmoid
		public RuleCall getSigmoidParserRuleCall_0() { return cSigmoidParserRuleCall_0; }
		
		//Threshold
		public RuleCall getThresholdParserRuleCall_1() { return cThresholdParserRuleCall_1; }
		
		//Custom
		public RuleCall getCustomParserRuleCall_2() { return cCustomParserRuleCall_2; }
	}
	public class SigmoidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Sigmoid");
		private final Keyword cSigmoidKeyword = (Keyword)rule.eContents().get(1);
		
		//Sigmoid:
		//	'sigmoid';
		@Override public ParserRule getRule() { return rule; }
		
		//'sigmoid'
		public Keyword getSigmoidKeyword() { return cSigmoidKeyword; }
	}
	public class ThresholdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Threshold");
		private final Keyword cThresholdKeyword = (Keyword)rule.eContents().get(1);
		
		//Threshold:
		//	'threshold';
		@Override public ParserRule getRule() { return rule; }
		
		//'threshold'
		public Keyword getThresholdKeyword() { return cThresholdKeyword; }
	}
	public class CustomElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "dk.sdu.mdsd.ann.Ann.Custom");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFunctionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFunctionIDTerminalRuleCall_2_0 = (RuleCall)cFunctionAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Custom:
		//	name=ID '{'
		//	function=ID '}';
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID '{' function=ID '}'
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//function=ID
		public Assignment getFunctionAssignment_2() { return cFunctionAssignment_2; }
		
		//ID
		public RuleCall getFunctionIDTerminalRuleCall_2_0() { return cFunctionIDTerminalRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private final ANNModelElements pANNModel;
	private final DECIMALElements pDECIMAL;
	private final LayerElements pLayer;
	private final HiddenElements pHidden;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final LearningRuleElements pLearningRule;
	private final SigmoidElements pSigmoid;
	private final ThresholdElements pThreshold;
	private final CustomElements pCustom;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AnnGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pANNModel = new ANNModelElements();
		this.pDECIMAL = new DECIMALElements();
		this.pLayer = new LayerElements();
		this.pHidden = new HiddenElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pLearningRule = new LearningRuleElements();
		this.pSigmoid = new SigmoidElements();
		this.pThreshold = new ThresholdElements();
		this.pCustom = new CustomElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("dk.sdu.mdsd.ann.Ann".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//ANNModel:
	//	name=ID '{'
	//	'alpha' alpha=DECIMAL
	//	'epochs' epochs=INT
	//	Layer+=Layer+ '}';
	public ANNModelElements getANNModelAccess() {
		return pANNModel;
	}
	
	public ParserRule getANNModelRule() {
		return getANNModelAccess().getRule();
	}
	
	//DECIMAL:
	//	INT '.' INT;
	public DECIMALElements getDECIMALAccess() {
		return pDECIMAL;
	}
	
	public ParserRule getDECIMALRule() {
		return getDECIMALAccess().getRule();
	}
	
	//Layer:
	//	Hidden | Input | Output;
	public LayerElements getLayerAccess() {
		return pLayer;
	}
	
	public ParserRule getLayerRule() {
		return getLayerAccess().getRule();
	}
	
	//Hidden:
	//	'hidden' '{'
	//	'size' size=INT
	//	'learningRule' l_rule=LearningRule '}';
	public HiddenElements getHiddenAccess() {
		return pHidden;
	}
	
	public ParserRule getHiddenRule() {
		return getHiddenAccess().getRule();
	}
	
	//Input:
	//	'in' '{'
	//	'size' size=INT '}';
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	'out' '{'
	//	'size' size=INT
	//	'learningRule' l_rule=LearningRule '}';
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//LearningRule:
	//	Sigmoid | Threshold | Custom;
	public LearningRuleElements getLearningRuleAccess() {
		return pLearningRule;
	}
	
	public ParserRule getLearningRuleRule() {
		return getLearningRuleAccess().getRule();
	}
	
	//Sigmoid:
	//	'sigmoid';
	public SigmoidElements getSigmoidAccess() {
		return pSigmoid;
	}
	
	public ParserRule getSigmoidRule() {
		return getSigmoidAccess().getRule();
	}
	
	//Threshold:
	//	'threshold';
	public ThresholdElements getThresholdAccess() {
		return pThreshold;
	}
	
	public ParserRule getThresholdRule() {
		return getThresholdAccess().getRule();
	}
	
	//Custom:
	//	name=ID '{'
	//	function=ID '}';
	public CustomElements getCustomAccess() {
		return pCustom;
	}
	
	public ParserRule getCustomRule() {
		return getCustomAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
