/*
 * generated by Xtext 2.11.0
 */
package dk.sdu.mdsd.ann.serializer;

import com.google.inject.Inject;
import dk.sdu.mdsd.ann.services.AnnGrammarAccess;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;

@SuppressWarnings("all")
public class AnnSyntacticSequencer extends AbstractSyntacticSequencer {

	protected AnnGrammarAccess grammarAccess;
	protected AbstractElementAlias match_LearningRule_SigmoidParserRuleCall_0_or_ThresholdParserRuleCall_1;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (AnnGrammarAccess) access;
		match_LearningRule_SigmoidParserRuleCall_0_or_ThresholdParserRuleCall_1 = new AlternativeAlias(false, false, new TokenAlias(false, false, grammarAccess.getLearningRuleAccess().getSigmoidParserRuleCall_0()), new TokenAlias(false, false, grammarAccess.getLearningRuleAccess().getThresholdParserRuleCall_1()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getSigmoidRule())
			return getSigmoidToken(semanticObject, ruleCall, node);
		else if (ruleCall.getRule() == grammarAccess.getThresholdRule())
			return getThresholdToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * Sigmoid:
	 * 	'sigmoid'
	 * ;
	 */
	protected String getSigmoidToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "sigmoid";
	}
	
	/**
	 * Threshold:
	 * 	'threshold'
	 * ;
	 */
	protected String getThresholdToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "threshold";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_LearningRule_SigmoidParserRuleCall_0_or_ThresholdParserRuleCall_1.equals(syntax))
				emit_LearningRule_SigmoidParserRuleCall_0_or_ThresholdParserRuleCall_1(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     Sigmoid | Threshold
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_LearningRule_SigmoidParserRuleCall_0_or_ThresholdParserRuleCall_1(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
