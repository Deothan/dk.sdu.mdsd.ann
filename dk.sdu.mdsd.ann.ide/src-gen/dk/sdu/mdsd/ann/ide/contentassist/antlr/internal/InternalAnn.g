/*
 * generated by Xtext 2.11.0
 */
grammar InternalAnn;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package dk.sdu.mdsd.ann.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package dk.sdu.mdsd.ann.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import dk.sdu.mdsd.ann.services.AnnGrammarAccess;

}
@parser::members {
	private AnnGrammarAccess grammarAccess;

	public void setGrammarAccess(AnnGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleANNModel
entryRuleANNModel
:
{ before(grammarAccess.getANNModelRule()); }
	 ruleANNModel
{ after(grammarAccess.getANNModelRule()); } 
	 EOF 
;

// Rule ANNModel
ruleANNModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getANNModelAccess().getGroup()); }
		(rule__ANNModel__Group__0)
		{ after(grammarAccess.getANNModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDECIMAL
entryRuleDECIMAL
:
{ before(grammarAccess.getDECIMALRule()); }
	 ruleDECIMAL
{ after(grammarAccess.getDECIMALRule()); } 
	 EOF 
;

// Rule DECIMAL
ruleDECIMAL 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDECIMALAccess().getGroup()); }
		(rule__DECIMAL__Group__0)
		{ after(grammarAccess.getDECIMALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLayer
entryRuleLayer
:
{ before(grammarAccess.getLayerRule()); }
	 ruleLayer
{ after(grammarAccess.getLayerRule()); } 
	 EOF 
;

// Rule Layer
ruleLayer 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLayerAccess().getAlternatives()); }
		(rule__Layer__Alternatives)
		{ after(grammarAccess.getLayerAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHidden
entryRuleHidden
:
{ before(grammarAccess.getHiddenRule()); }
	 ruleHidden
{ after(grammarAccess.getHiddenRule()); } 
	 EOF 
;

// Rule Hidden
ruleHidden 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHiddenAccess().getGroup()); }
		(rule__Hidden__Group__0)
		{ after(grammarAccess.getHiddenAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getGroup()); }
		(rule__Input__Group__0)
		{ after(grammarAccess.getInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRestriction
entryRuleRestriction
:
{ before(grammarAccess.getRestrictionRule()); }
	 ruleRestriction
{ after(grammarAccess.getRestrictionRule()); } 
	 EOF 
;

// Rule Restriction
ruleRestriction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRestrictionAccess().getGroup()); }
		(rule__Restriction__Group__0)
		{ after(grammarAccess.getRestrictionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConstraint
entryRuleConstraint
:
{ before(grammarAccess.getConstraintRule()); }
	 ruleConstraint
{ after(grammarAccess.getConstraintRule()); } 
	 EOF 
;

// Rule Constraint
ruleConstraint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConstraintAccess().getGroup()); }
		(rule__Constraint__Group__0)
		{ after(grammarAccess.getConstraintAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleField
entryRuleField
:
{ before(grammarAccess.getFieldRule()); }
	 ruleField
{ after(grammarAccess.getFieldRule()); } 
	 EOF 
;

// Rule Field
ruleField 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFieldAccess().getGroup()); }
		(rule__Field__Group__0)
		{ after(grammarAccess.getFieldAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCondition
entryRuleCondition
:
{ before(grammarAccess.getConditionRule()); }
	 ruleCondition
{ after(grammarAccess.getConditionRule()); } 
	 EOF 
;

// Rule Condition
ruleCondition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionAccess().getGroup()); }
		(rule__Condition__Group__0)
		{ after(grammarAccess.getConditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleConditionalOperator
entryRuleConditionalOperator
:
{ before(grammarAccess.getConditionalOperatorRule()); }
	 ruleConditionalOperator
{ after(grammarAccess.getConditionalOperatorRule()); } 
	 EOF 
;

// Rule ConditionalOperator
ruleConditionalOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getConditionalOperatorAccess().getAlternatives()); }
		(rule__ConditionalOperator__Alternatives)
		{ after(grammarAccess.getConditionalOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutput
entryRuleOutput
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputAccess().getGroup()); }
		(rule__Output__Group__0)
		{ after(grammarAccess.getOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleActivation
entryRuleActivation
:
{ before(grammarAccess.getActivationRule()); }
	 ruleActivation
{ after(grammarAccess.getActivationRule()); } 
	 EOF 
;

// Rule Activation
ruleActivation 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getActivationAccess().getAlternatives()); }
		(rule__Activation__Alternatives)
		{ after(grammarAccess.getActivationAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExternal
entryRuleExternal
:
{ before(grammarAccess.getExternalRule()); }
	 ruleExternal
{ after(grammarAccess.getExternalRule()); } 
	 EOF 
;

// Rule External
ruleExternal 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExternalAccess().getGroup()); }
		(rule__External__Group__0)
		{ after(grammarAccess.getExternalAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSigmoid
entryRuleSigmoid
:
{ before(grammarAccess.getSigmoidRule()); }
	 ruleSigmoid
{ after(grammarAccess.getSigmoidRule()); } 
	 EOF 
;

// Rule Sigmoid
ruleSigmoid 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSigmoidAccess().getGroup()); }
		(rule__Sigmoid__Group__0)
		{ after(grammarAccess.getSigmoidAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTansig
entryRuleTansig
:
{ before(grammarAccess.getTansigRule()); }
	 ruleTansig
{ after(grammarAccess.getTansigRule()); } 
	 EOF 
;

// Rule Tansig
ruleTansig 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTansigAccess().getGroup()); }
		(rule__Tansig__Group__0)
		{ after(grammarAccess.getTansigAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCustom
entryRuleCustom
:
{ before(grammarAccess.getCustomRule()); }
	 ruleCustom
{ after(grammarAccess.getCustomRule()); } 
	 EOF 
;

// Rule Custom
ruleCustom 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCustomAccess().getGroup()); }
		(rule__Custom__Group__0)
		{ after(grammarAccess.getCustomAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpression
entryRuleExpression
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExpressionAccess().getGroup()); }
		(rule__Expression__Group__0)
		{ after(grammarAccess.getExpressionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFactor
entryRuleFactor
:
{ before(grammarAccess.getFactorRule()); }
	 ruleFactor
{ after(grammarAccess.getFactorRule()); } 
	 EOF 
;

// Rule Factor
ruleFactor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorAccess().getGroup()); }
		(rule__Factor__Group__0)
		{ after(grammarAccess.getFactorAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMath
entryRuleMath
:
{ before(grammarAccess.getMathRule()); }
	 ruleMath
{ after(grammarAccess.getMathRule()); } 
	 EOF 
;

// Rule Math
ruleMath 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMathAccess().getAlternatives()); }
		(rule__Math__Alternatives)
		{ after(grammarAccess.getMathAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEuler
entryRuleEuler
:
{ before(grammarAccess.getEulerRule()); }
	 ruleEuler
{ after(grammarAccess.getEulerRule()); } 
	 EOF 
;

// Rule Euler
ruleEuler 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEulerAccess().getGroup()); }
		(rule__Euler__Group__0)
		{ after(grammarAccess.getEulerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNLog
entryRuleNLog
:
{ before(grammarAccess.getNLogRule()); }
	 ruleNLog
{ after(grammarAccess.getNLogRule()); } 
	 EOF 
;

// Rule NLog
ruleNLog 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNLogAccess().getGroup()); }
		(rule__NLog__Group__0)
		{ after(grammarAccess.getNLogAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSin
entryRuleSin
:
{ before(grammarAccess.getSinRule()); }
	 ruleSin
{ after(grammarAccess.getSinRule()); } 
	 EOF 
;

// Rule Sin
ruleSin 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSinAccess().getGroup()); }
		(rule__Sin__Group__0)
		{ after(grammarAccess.getSinAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCos
entryRuleCos
:
{ before(grammarAccess.getCosRule()); }
	 ruleCos
{ after(grammarAccess.getCosRule()); } 
	 EOF 
;

// Rule Cos
ruleCos 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCosAccess().getGroup()); }
		(rule__Cos__Group__0)
		{ after(grammarAccess.getCosAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSqrt
entryRuleSqrt
:
{ before(grammarAccess.getSqrtRule()); }
	 ruleSqrt
{ after(grammarAccess.getSqrtRule()); } 
	 EOF 
;

// Rule Sqrt
ruleSqrt 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSqrtAccess().getGroup()); }
		(rule__Sqrt__Group__0)
		{ after(grammarAccess.getSqrtAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePower
entryRulePower
:
{ before(grammarAccess.getPowerRule()); }
	 rulePower
{ after(grammarAccess.getPowerRule()); } 
	 EOF 
;

// Rule Power
rulePower 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPowerAccess().getGroup()); }
		(rule__Power__Group__0)
		{ after(grammarAccess.getPowerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLetter
entryRuleLetter
:
{ before(grammarAccess.getLetterRule()); }
	 ruleLetter
{ after(grammarAccess.getLetterRule()); } 
	 EOF 
;

// Rule Letter
ruleLetter 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLetterAccess().getGroup()); }
		(rule__Letter__Group__0)
		{ after(grammarAccess.getLetterAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePartOperator
entryRulePartOperator
:
{ before(grammarAccess.getPartOperatorRule()); }
	 rulePartOperator
{ after(grammarAccess.getPartOperatorRule()); } 
	 EOF 
;

// Rule PartOperator
rulePartOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPartOperatorAccess().getAlternatives()); }
		(rule__PartOperator__Alternatives)
		{ after(grammarAccess.getPartOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFactorOperator
entryRuleFactorOperator
:
{ before(grammarAccess.getFactorOperatorRule()); }
	 ruleFactorOperator
{ after(grammarAccess.getFactorOperatorRule()); } 
	 EOF 
;

// Rule FactorOperator
ruleFactorOperator 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFactorOperatorAccess().getAlternatives()); }
		(rule__FactorOperator__Alternatives)
		{ after(grammarAccess.getFactorOperatorAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberLiteral
entryRuleNumberLiteral
:
{ before(grammarAccess.getNumberLiteralRule()); }
	 ruleNumberLiteral
{ after(grammarAccess.getNumberLiteralRule()); } 
	 EOF 
;

// Rule NumberLiteral
ruleNumberLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getGroup()); }
		(rule__NumberLiteral__Group__0)
		{ after(grammarAccess.getNumberLiteralAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNumberTypes
entryRuleNumberTypes
:
{ before(grammarAccess.getNumberTypesRule()); }
	 ruleNumberTypes
{ after(grammarAccess.getNumberTypesRule()); } 
	 EOF 
;

// Rule NumberTypes
ruleNumberTypes 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNumberTypesAccess().getAlternatives()); }
		(rule__NumberTypes__Alternatives)
		{ after(grammarAccess.getNumberTypesAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Layer__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLayerAccess().getHiddenParserRuleCall_0()); }
		ruleHidden
		{ after(grammarAccess.getLayerAccess().getHiddenParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLayerAccess().getInputParserRuleCall_1()); }
		ruleInput
		{ after(grammarAccess.getLayerAccess().getInputParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLayerAccess().getOutputParserRuleCall_2()); }
		ruleOutput
		{ after(grammarAccess.getLayerAccess().getOutputParserRuleCall_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ConditionalOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionalOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
		'=='
		{ after(grammarAccess.getConditionalOperatorAccess().getEqualsSignEqualsSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalOperatorAccess().getLessThanSignKeyword_1()); }
		'<'
		{ after(grammarAccess.getConditionalOperatorAccess().getLessThanSignKeyword_1()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalOperatorAccess().getGreaterThanSignKeyword_2()); }
		'>'
		{ after(grammarAccess.getConditionalOperatorAccess().getGreaterThanSignKeyword_2()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
		'<='
		{ after(grammarAccess.getConditionalOperatorAccess().getLessThanSignEqualsSignKeyword_3()); }
	)
	|
	(
		{ before(grammarAccess.getConditionalOperatorAccess().getGreaterThanSignEqualsSignKeyword_4()); }
		'>='
		{ after(grammarAccess.getConditionalOperatorAccess().getGreaterThanSignEqualsSignKeyword_4()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Activation__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getActivationAccess().getSigmoidParserRuleCall_0()); }
		ruleSigmoid
		{ after(grammarAccess.getActivationAccess().getSigmoidParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getActivationAccess().getTansigParserRuleCall_1()); }
		ruleTansig
		{ after(grammarAccess.getActivationAccess().getTansigParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getActivationAccess().getExternalParserRuleCall_2()); }
		ruleExternal
		{ after(grammarAccess.getActivationAccess().getExternalParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getActivationAccess().getCustomParserRuleCall_3()); }
		ruleCustom
		{ after(grammarAccess.getActivationAccess().getCustomParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_0()); }
		ruleNumberLiteral
		{ after(grammarAccess.getPrimaryAccess().getNumberLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getLetterParserRuleCall_1()); }
		ruleLetter
		{ after(grammarAccess.getPrimaryAccess().getLetterParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_2()); }
		(rule__Primary__Group_2__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getMathParserRuleCall_3()); }
		ruleMath
		{ after(grammarAccess.getPrimaryAccess().getMathParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Math__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMathAccess().getEulerParserRuleCall_0()); }
		ruleEuler
		{ after(grammarAccess.getMathAccess().getEulerParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getMathAccess().getNLogParserRuleCall_1()); }
		ruleNLog
		{ after(grammarAccess.getMathAccess().getNLogParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getMathAccess().getSinParserRuleCall_2()); }
		ruleSin
		{ after(grammarAccess.getMathAccess().getSinParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getMathAccess().getCosParserRuleCall_3()); }
		ruleCos
		{ after(grammarAccess.getMathAccess().getCosParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getMathAccess().getSqrtParserRuleCall_4()); }
		ruleSqrt
		{ after(grammarAccess.getMathAccess().getSqrtParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getMathAccess().getPowerParserRuleCall_5()); }
		rulePower
		{ after(grammarAccess.getMathAccess().getPowerParserRuleCall_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PartOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPartOperatorAccess().getPlusSignKeyword_0()); }
		'+'
		{ after(grammarAccess.getPartOperatorAccess().getPlusSignKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getPartOperatorAccess().getHyphenMinusKeyword_1()); }
		'-'
		{ after(grammarAccess.getPartOperatorAccess().getHyphenMinusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__FactorOperator__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorOperatorAccess().getAsteriskKeyword_0()); }
		'*'
		{ after(grammarAccess.getFactorOperatorAccess().getAsteriskKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getFactorOperatorAccess().getSolidusKeyword_1()); }
		'/'
		{ after(grammarAccess.getFactorOperatorAccess().getSolidusKeyword_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberTypes__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberTypesAccess().getDECIMALParserRuleCall_0()); }
		ruleDECIMAL
		{ after(grammarAccess.getNumberTypesAccess().getDECIMALParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getNumberTypesAccess().getINTTerminalRuleCall_1()); }
		RULE_INT
		{ after(grammarAccess.getNumberTypesAccess().getINTTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ANNModel__Group__0__Impl
	rule__ANNModel__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getANNModelAccess().getNameAssignment_0()); }
	(rule__ANNModel__NameAssignment_0)
	{ after(grammarAccess.getANNModelAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ANNModel__Group__1__Impl
	rule__ANNModel__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getANNModelAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getANNModelAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ANNModel__Group__2__Impl
	rule__ANNModel__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getANNModelAccess().getAlphaKeyword_2()); }
	'alpha'
	{ after(grammarAccess.getANNModelAccess().getAlphaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ANNModel__Group__3__Impl
	rule__ANNModel__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getANNModelAccess().getAlphaAssignment_3()); }
	(rule__ANNModel__AlphaAssignment_3)
	{ after(grammarAccess.getANNModelAccess().getAlphaAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ANNModel__Group__4__Impl
	rule__ANNModel__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getANNModelAccess().getEpochsKeyword_4()); }
	'epochs'
	{ after(grammarAccess.getANNModelAccess().getEpochsKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ANNModel__Group__5__Impl
	rule__ANNModel__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getANNModelAccess().getEpochsAssignment_5()); }
	(rule__ANNModel__EpochsAssignment_5)
	{ after(grammarAccess.getANNModelAccess().getEpochsAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ANNModel__Group__6__Impl
	rule__ANNModel__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getANNModelAccess().getConstraintsAssignment_6()); }
	(rule__ANNModel__ConstraintsAssignment_6)*
	{ after(grammarAccess.getANNModelAccess().getConstraintsAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ANNModel__Group__7__Impl
	rule__ANNModel__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getANNModelAccess().getActivationAssignment_7()); }
	(rule__ANNModel__ActivationAssignment_7)*
	{ after(grammarAccess.getANNModelAccess().getActivationAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ANNModel__Group__8__Impl
	rule__ANNModel__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getANNModelAccess().getLayerAssignment_8()); }
	(rule__ANNModel__LayerAssignment_8)*
	{ after(grammarAccess.getANNModelAccess().getLayerAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ANNModel__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getANNModelAccess().getRightCurlyBracketKeyword_9()); }
	'}'
	{ after(grammarAccess.getANNModelAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__DECIMAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DECIMAL__Group__0__Impl
	rule__DECIMAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__DECIMAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_0()); }
	RULE_INT
	{ after(grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DECIMAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DECIMAL__Group__1__Impl
	rule__DECIMAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__DECIMAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDECIMALAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getDECIMALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__DECIMAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__DECIMAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__DECIMAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getDECIMALAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Hidden__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hidden__Group__0__Impl
	rule__Hidden__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHiddenAccess().getHiddenKeyword_0()); }
	'hidden'
	{ after(grammarAccess.getHiddenAccess().getHiddenKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hidden__Group__1__Impl
	rule__Hidden__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHiddenAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getHiddenAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hidden__Group__2__Impl
	rule__Hidden__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHiddenAccess().getSizeKeyword_2()); }
	'size'
	{ after(grammarAccess.getHiddenAccess().getSizeKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hidden__Group__3__Impl
	rule__Hidden__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHiddenAccess().getSizeAssignment_3()); }
	(rule__Hidden__SizeAssignment_3)
	{ after(grammarAccess.getHiddenAccess().getSizeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hidden__Group__4__Impl
	rule__Hidden__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHiddenAccess().getActivationKeyword_4()); }
	'activation'
	{ after(grammarAccess.getHiddenAccess().getActivationKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hidden__Group__5__Impl
	rule__Hidden__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHiddenAccess().getL_ruleAssignment_5()); }
	(rule__Hidden__L_ruleAssignment_5)
	{ after(grammarAccess.getHiddenAccess().getL_ruleAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Hidden__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHiddenAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getHiddenAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getInKeyword_0()); }
	'in'
	{ after(grammarAccess.getInputAccess().getInKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__1__Impl
	rule__Input__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getInputAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__2__Impl
	rule__Input__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getSizeKeyword_2()); }
	'size'
	{ after(grammarAccess.getInputAccess().getSizeKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__3__Impl
	rule__Input__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getSizeAssignment_3()); }
	(rule__Input__SizeAssignment_3)
	{ after(grammarAccess.getInputAccess().getSizeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__4__Impl
	rule__Input__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getSourceKeyword_4()); }
	'source'
	{ after(grammarAccess.getInputAccess().getSourceKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__5__Impl
	rule__Input__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getSourceAssignment_5()); }
	(rule__Input__SourceAssignment_5)
	{ after(grammarAccess.getInputAccess().getSourceAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__6__Impl
	rule__Input__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getGroup_6()); }
	(rule__Input__Group_6__0)?
	{ after(grammarAccess.getInputAccess().getGroup_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getInputAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_6__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_6__0__Impl
	rule__Input__Group_6__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_6__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getConstraintsKeyword_6_0()); }
	'constraints'
	{ after(grammarAccess.getInputAccess().getConstraintsKeyword_6_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_6__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_6__1__Impl
	rule__Input__Group_6__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_6__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getRestrictionsAssignment_6_1()); }
	(rule__Input__RestrictionsAssignment_6_1)?
	{ after(grammarAccess.getInputAccess().getRestrictionsAssignment_6_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_6__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_6__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_6__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getMoreRestrictionsAssignment_6_2()); }
	(rule__Input__MoreRestrictionsAssignment_6_2)*
	{ after(grammarAccess.getInputAccess().getMoreRestrictionsAssignment_6_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Restriction__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Restriction__Group__0__Impl
	rule__Restriction__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Restriction__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestrictionAccess().getCommaKeyword_0()); }
	','
	{ after(grammarAccess.getRestrictionAccess().getCommaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Restriction__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Restriction__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Restriction__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRestrictionAccess().getConstraintAssignment_1()); }
	(rule__Restriction__ConstraintAssignment_1)
	{ after(grammarAccess.getRestrictionAccess().getConstraintAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Constraint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__0__Impl
	rule__Constraint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getConstraintKeyword_0()); }
	'constraint'
	{ after(grammarAccess.getConstraintAccess().getConstraintKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__1__Impl
	rule__Constraint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getNameAssignment_1()); }
	(rule__Constraint__NameAssignment_1)
	{ after(grammarAccess.getConstraintAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__2__Impl
	rule__Constraint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getLeftParenthesisKeyword_2()); }
	'('
	{ after(grammarAccess.getConstraintAccess().getLeftParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__3__Impl
	rule__Constraint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getFieldAssignment_3()); }
	(rule__Constraint__FieldAssignment_3)
	{ after(grammarAccess.getConstraintAccess().getFieldAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__4__Impl
	rule__Constraint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getFieldsAssignment_4()); }
	(rule__Constraint__FieldsAssignment_4)*
	{ after(grammarAccess.getConstraintAccess().getFieldsAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__5__Impl
	rule__Constraint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getRightParenthesisKeyword_5()); }
	')'
	{ after(grammarAccess.getConstraintAccess().getRightParenthesisKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__6__Impl
	rule__Constraint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_6()); }
	'{'
	{ after(grammarAccess.getConstraintAccess().getLeftCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__7__Impl
	rule__Constraint__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getConditionAssignment_7()); }
	(rule__Constraint__ConditionAssignment_7)
	{ after(grammarAccess.getConstraintAccess().getConditionAssignment_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Constraint__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_8()); }
	'}'
	{ after(grammarAccess.getConstraintAccess().getRightCurlyBracketKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Field__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__0__Impl
	rule__Field__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getCommaKeyword_0()); }
	','
	{ after(grammarAccess.getFieldAccess().getCommaKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Field__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFieldAccess().getFieldAssignment_1()); }
	(rule__Field__FieldAssignment_1)
	{ after(grammarAccess.getFieldAccess().getFieldAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Condition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__0__Impl
	rule__Condition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getConditionAssignment_0()); }
	(rule__Condition__ConditionAssignment_0)
	{ after(grammarAccess.getConditionAccess().getConditionAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Condition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getConditionAccess().getNum2Assignment_1()); }
	(rule__Condition__Num2Assignment_1)
	{ after(grammarAccess.getConditionAccess().getNum2Assignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getOutKeyword_0()); }
	'out'
	{ after(grammarAccess.getOutputAccess().getOutKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__1__Impl
	rule__Output__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getOutputAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__2__Impl
	rule__Output__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getSizeKeyword_2()); }
	'size'
	{ after(grammarAccess.getOutputAccess().getSizeKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__3__Impl
	rule__Output__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getSizeAssignment_3()); }
	(rule__Output__SizeAssignment_3)
	{ after(grammarAccess.getOutputAccess().getSizeAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__4__Impl
	rule__Output__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getActivationKeyword_4()); }
	'activation'
	{ after(grammarAccess.getOutputAccess().getActivationKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__5__Impl
	rule__Output__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getL_ruleAssignment_5()); }
	(rule__Output__L_ruleAssignment_5)
	{ after(grammarAccess.getOutputAccess().getL_ruleAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getOutputAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__External__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__0__Impl
	rule__External__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getNameAssignment_0()); }
	(rule__External__NameAssignment_0)
	{ after(grammarAccess.getExternalAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__External__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__External__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExternalAccess().getExternalKeyword_1()); }
	'external'
	{ after(grammarAccess.getExternalAccess().getExternalKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sigmoid__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sigmoid__Group__0__Impl
	rule__Sigmoid__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sigmoid__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSigmoidAccess().getNameAssignment_0()); }
	(rule__Sigmoid__NameAssignment_0)
	{ after(grammarAccess.getSigmoidAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sigmoid__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sigmoid__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sigmoid__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSigmoidAccess().getRuleAssignment_1()); }
	(rule__Sigmoid__RuleAssignment_1)
	{ after(grammarAccess.getSigmoidAccess().getRuleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Tansig__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tansig__Group__0__Impl
	rule__Tansig__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Tansig__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTansigAccess().getNameAssignment_0()); }
	(rule__Tansig__NameAssignment_0)
	{ after(grammarAccess.getTansigAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tansig__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Tansig__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Tansig__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTansigAccess().getRuleAssignment_1()); }
	(rule__Tansig__RuleAssignment_1)
	{ after(grammarAccess.getTansigAccess().getRuleAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Custom__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Custom__Group__0__Impl
	rule__Custom__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomAccess().getNameAssignment_0()); }
	(rule__Custom__NameAssignment_0)
	{ after(grammarAccess.getCustomAccess().getNameAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Custom__Group__1__Impl
	rule__Custom__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomAccess().getXKeyword_1()); }
	'(x)'
	{ after(grammarAccess.getCustomAccess().getXKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Custom__Group__2__Impl
	rule__Custom__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getCustomAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Custom__Group__3__Impl
	rule__Custom__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomAccess().getFunctionKeyword_3()); }
	'function'
	{ after(grammarAccess.getCustomAccess().getFunctionKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Custom__Group__4__Impl
	rule__Custom__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomAccess().getEqualsSignKeyword_4()); }
	'='
	{ after(grammarAccess.getCustomAccess().getEqualsSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Custom__Group__5__Impl
	rule__Custom__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomAccess().getExpAssignment_5()); }
	(rule__Custom__ExpAssignment_5)
	{ after(grammarAccess.getCustomAccess().getExpAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Custom__Group__6__Impl
	rule__Custom__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomAccess().getDerivativeKeyword_6()); }
	'derivative'
	{ after(grammarAccess.getCustomAccess().getDerivativeKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Custom__Group__7__Impl
	rule__Custom__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomAccess().getEqualsSignKeyword_7()); }
	'='
	{ after(grammarAccess.getCustomAccess().getEqualsSignKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Custom__Group__8__Impl
	rule__Custom__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomAccess().getDerAssignment_8()); }
	(rule__Custom__DerAssignment_8)
	{ after(grammarAccess.getCustomAccess().getDerAssignment_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Custom__Group__9__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCustomAccess().getRightCurlyBracketKeyword_9()); }
	'}'
	{ after(grammarAccess.getCustomAccess().getRightCurlyBracketKeyword_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__0__Impl
	rule__Expression__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getFactorParserRuleCall_0()); }
	ruleFactor
	{ after(grammarAccess.getExpressionAccess().getFactorParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getGroup_1()); }
	(rule__Expression__Group_1__0)*
	{ after(grammarAccess.getExpressionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Expression__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__0__Impl
	rule__Expression__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getPartLeftAction_1_0()); }
	()
	{ after(grammarAccess.getExpressionAccess().getPartLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__1__Impl
	rule__Expression__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getOperatorAssignment_1_1()); }
	(rule__Expression__OperatorAssignment_1_1)
	{ after(grammarAccess.getExpressionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Expression__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
	(rule__Expression__RightAssignment_1_2)
	{ after(grammarAccess.getExpressionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group__0__Impl
	rule__Factor__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getFactorAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getGroup_1()); }
	(rule__Factor__Group_1__0)*
	{ after(grammarAccess.getFactorAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Factor__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__0__Impl
	rule__Factor__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getFacLeftAction_1_0()); }
	()
	{ after(grammarAccess.getFactorAccess().getFacLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__1__Impl
	rule__Factor__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getOperatorAssignment_1_1()); }
	(rule__Factor__OperatorAssignment_1_1)
	{ after(grammarAccess.getFactorAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Factor__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFactorAccess().getRightAssignment_1_2()); }
	(rule__Factor__RightAssignment_1_2)
	{ after(grammarAccess.getFactorAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__0__Impl
	rule__Primary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__1__Impl
	rule__Primary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_2_1()); }
	ruleExpression
	{ after(grammarAccess.getPrimaryAccess().getExpressionParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Euler__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Euler__Group__0__Impl
	rule__Euler__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Euler__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEulerAccess().getEKeyword_0()); }
	'e('
	{ after(grammarAccess.getEulerAccess().getEKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Euler__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Euler__Group__1__Impl
	rule__Euler__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Euler__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEulerAccess().getValueAssignment_1()); }
	(rule__Euler__ValueAssignment_1)
	{ after(grammarAccess.getEulerAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Euler__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Euler__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Euler__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getEulerAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getEulerAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NLog__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NLog__Group__0__Impl
	rule__NLog__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NLog__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNLogAccess().getNlogKeyword_0()); }
	'nlog('
	{ after(grammarAccess.getNLogAccess().getNlogKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NLog__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NLog__Group__1__Impl
	rule__NLog__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__NLog__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNLogAccess().getValueAssignment_1()); }
	(rule__NLog__ValueAssignment_1)
	{ after(grammarAccess.getNLogAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NLog__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NLog__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NLog__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNLogAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getNLogAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sin__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sin__Group__0__Impl
	rule__Sin__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sin__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSinAccess().getSinKeyword_0()); }
	'sin('
	{ after(grammarAccess.getSinAccess().getSinKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sin__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sin__Group__1__Impl
	rule__Sin__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sin__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSinAccess().getValueAssignment_1()); }
	(rule__Sin__ValueAssignment_1)
	{ after(grammarAccess.getSinAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sin__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sin__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sin__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSinAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getSinAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Cos__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cos__Group__0__Impl
	rule__Cos__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Cos__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCosAccess().getCosKeyword_0()); }
	'cos('
	{ after(grammarAccess.getCosAccess().getCosKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cos__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cos__Group__1__Impl
	rule__Cos__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Cos__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCosAccess().getValueAssignment_1()); }
	(rule__Cos__ValueAssignment_1)
	{ after(grammarAccess.getCosAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cos__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Cos__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Cos__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCosAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getCosAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Sqrt__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sqrt__Group__0__Impl
	rule__Sqrt__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Sqrt__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSqrtAccess().getSqrtKeyword_0()); }
	'sqrt('
	{ after(grammarAccess.getSqrtAccess().getSqrtKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sqrt__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sqrt__Group__1__Impl
	rule__Sqrt__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Sqrt__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSqrtAccess().getValueAssignment_1()); }
	(rule__Sqrt__ValueAssignment_1)
	{ after(grammarAccess.getSqrtAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sqrt__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Sqrt__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Sqrt__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSqrtAccess().getRightParenthesisKeyword_2()); }
	')'
	{ after(grammarAccess.getSqrtAccess().getRightParenthesisKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Power__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group__0__Impl
	rule__Power__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getPowKeyword_0()); }
	'pow('
	{ after(grammarAccess.getPowerAccess().getPowKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group__1__Impl
	rule__Power__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getBaseAssignment_1()); }
	(rule__Power__BaseAssignment_1)
	{ after(grammarAccess.getPowerAccess().getBaseAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group__2__Impl
	rule__Power__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getCommaKeyword_2()); }
	','
	{ after(grammarAccess.getPowerAccess().getCommaKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group__3__Impl
	rule__Power__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getExponentAssignment_3()); }
	(rule__Power__ExponentAssignment_3)
	{ after(grammarAccess.getPowerAccess().getExponentAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Power__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPowerAccess().getRightParenthesisKeyword_4()); }
	')'
	{ after(grammarAccess.getPowerAccess().getRightParenthesisKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Letter__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Letter__Group__0__Impl
	rule__Letter__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Letter__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetterAccess().getOperatorAssignment_0()); }
	(rule__Letter__OperatorAssignment_0)?
	{ after(grammarAccess.getLetterAccess().getOperatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Letter__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Letter__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Letter__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLetterAccess().getValueAssignment_1()); }
	(rule__Letter__ValueAssignment_1)
	{ after(grammarAccess.getLetterAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__NumberLiteral__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group__0__Impl
	rule__NumberLiteral__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getOperatorAssignment_0()); }
	(rule__NumberLiteral__OperatorAssignment_0)?
	{ after(grammarAccess.getNumberLiteralAccess().getOperatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__NumberLiteral__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNumberLiteralAccess().getValueAssignment_1()); }
	(rule__NumberLiteral__ValueAssignment_1)
	{ after(grammarAccess.getNumberLiteralAccess().getValueAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ANNModel__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getANNModelAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getANNModelAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__AlphaAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getANNModelAccess().getAlphaDECIMALParserRuleCall_3_0()); }
		ruleDECIMAL
		{ after(grammarAccess.getANNModelAccess().getAlphaDECIMALParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__EpochsAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getANNModelAccess().getEpochsINTTerminalRuleCall_5_0()); }
		RULE_INT
		{ after(grammarAccess.getANNModelAccess().getEpochsINTTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__ConstraintsAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getANNModelAccess().getConstraintsConstraintParserRuleCall_6_0()); }
		ruleConstraint
		{ after(grammarAccess.getANNModelAccess().getConstraintsConstraintParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__ActivationAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getANNModelAccess().getActivationActivationParserRuleCall_7_0()); }
		ruleActivation
		{ after(grammarAccess.getANNModelAccess().getActivationActivationParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ANNModel__LayerAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getANNModelAccess().getLayerLayerParserRuleCall_8_0()); }
		ruleLayer
		{ after(grammarAccess.getANNModelAccess().getLayerLayerParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__SizeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHiddenAccess().getSizeINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getHiddenAccess().getSizeINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Hidden__L_ruleAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHiddenAccess().getL_ruleActivationCrossReference_5_0()); }
		(
			{ before(grammarAccess.getHiddenAccess().getL_ruleActivationIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getHiddenAccess().getL_ruleActivationIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getHiddenAccess().getL_ruleActivationCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__SizeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getSizeINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getInputAccess().getSizeINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__SourceAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getSourceSTRINGTerminalRuleCall_5_0()); }
		RULE_STRING
		{ after(grammarAccess.getInputAccess().getSourceSTRINGTerminalRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__RestrictionsAssignment_6_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getRestrictionsConstraintCrossReference_6_1_0()); }
		(
			{ before(grammarAccess.getInputAccess().getRestrictionsConstraintIDTerminalRuleCall_6_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getInputAccess().getRestrictionsConstraintIDTerminalRuleCall_6_1_0_1()); }
		)
		{ after(grammarAccess.getInputAccess().getRestrictionsConstraintCrossReference_6_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__MoreRestrictionsAssignment_6_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getInputAccess().getMoreRestrictionsRestrictionParserRuleCall_6_2_0()); }
		ruleRestriction
		{ after(grammarAccess.getInputAccess().getMoreRestrictionsRestrictionParserRuleCall_6_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Restriction__ConstraintAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRestrictionAccess().getConstraintConstraintCrossReference_1_0()); }
		(
			{ before(grammarAccess.getRestrictionAccess().getConstraintConstraintIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getRestrictionAccess().getConstraintConstraintIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getRestrictionAccess().getConstraintConstraintCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getConstraintAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__FieldAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getFieldINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getConstraintAccess().getFieldINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__FieldsAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getFieldsFieldParserRuleCall_4_0()); }
		ruleField
		{ after(grammarAccess.getConstraintAccess().getFieldsFieldParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Constraint__ConditionAssignment_7
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConstraintAccess().getConditionConditionParserRuleCall_7_0()); }
		ruleCondition
		{ after(grammarAccess.getConstraintAccess().getConditionConditionParserRuleCall_7_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Field__FieldAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFieldAccess().getFieldINTTerminalRuleCall_1_0()); }
		RULE_INT
		{ after(grammarAccess.getFieldAccess().getFieldINTTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__ConditionAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getConditionConditionalOperatorParserRuleCall_0_0()); }
		ruleConditionalOperator
		{ after(grammarAccess.getConditionAccess().getConditionConditionalOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Condition__Num2Assignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getConditionAccess().getNum2NumberTypesParserRuleCall_1_0()); }
		ruleNumberTypes
		{ after(grammarAccess.getConditionAccess().getNum2NumberTypesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__SizeAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getSizeINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getOutputAccess().getSizeINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__L_ruleAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOutputAccess().getL_ruleActivationCrossReference_5_0()); }
		(
			{ before(grammarAccess.getOutputAccess().getL_ruleActivationIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getOutputAccess().getL_ruleActivationIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getOutputAccess().getL_ruleActivationCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__External__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExternalAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getExternalAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sigmoid__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSigmoidAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getSigmoidAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sigmoid__RuleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSigmoidAccess().getRuleSigmoidKeyword_1_0()); }
		(
			{ before(grammarAccess.getSigmoidAccess().getRuleSigmoidKeyword_1_0()); }
			'sigmoid'
			{ after(grammarAccess.getSigmoidAccess().getRuleSigmoidKeyword_1_0()); }
		)
		{ after(grammarAccess.getSigmoidAccess().getRuleSigmoidKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tansig__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTansigAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getTansigAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Tansig__RuleAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTansigAccess().getRuleTansigKeyword_1_0()); }
		(
			{ before(grammarAccess.getTansigAccess().getRuleTansigKeyword_1_0()); }
			'tansig'
			{ after(grammarAccess.getTansigAccess().getRuleTansigKeyword_1_0()); }
		)
		{ after(grammarAccess.getTansigAccess().getRuleTansigKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__NameAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCustomAccess().getNameIDTerminalRuleCall_0_0()); }
		RULE_ID
		{ after(grammarAccess.getCustomAccess().getNameIDTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__ExpAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCustomAccess().getExpExpressionParserRuleCall_5_0()); }
		ruleExpression
		{ after(grammarAccess.getCustomAccess().getExpExpressionParserRuleCall_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Custom__DerAssignment_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCustomAccess().getDerExpressionParserRuleCall_8_0()); }
		ruleExpression
		{ after(grammarAccess.getCustomAccess().getDerExpressionParserRuleCall_8_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getOperatorPartOperatorParserRuleCall_1_1_0()); }
		rulePartOperator
		{ after(grammarAccess.getExpressionAccess().getOperatorPartOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExpressionAccess().getRightFactorParserRuleCall_1_2_0()); }
		ruleFactor
		{ after(grammarAccess.getExpressionAccess().getRightFactorParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getOperatorFactorOperatorParserRuleCall_1_1_0()); }
		ruleFactorOperator
		{ after(grammarAccess.getFactorAccess().getOperatorFactorOperatorParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Factor__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getFactorAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Euler__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEulerAccess().getValueExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getEulerAccess().getValueExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NLog__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNLogAccess().getValueExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getNLogAccess().getValueExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sin__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSinAccess().getValueExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSinAccess().getValueExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Cos__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCosAccess().getValueExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getCosAccess().getValueExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Sqrt__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSqrtAccess().getValueExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getSqrtAccess().getValueExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__BaseAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerAccess().getBaseExpressionParserRuleCall_1_0()); }
		ruleExpression
		{ after(grammarAccess.getPowerAccess().getBaseExpressionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Power__ExponentAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPowerAccess().getExponentExpressionParserRuleCall_3_0()); }
		ruleExpression
		{ after(grammarAccess.getPowerAccess().getExponentExpressionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Letter__OperatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetterAccess().getOperatorPartOperatorParserRuleCall_0_0()); }
		rulePartOperator
		{ after(grammarAccess.getLetterAccess().getOperatorPartOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Letter__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLetterAccess().getValueXKeyword_1_0()); }
		(
			{ before(grammarAccess.getLetterAccess().getValueXKeyword_1_0()); }
			'x'
			{ after(grammarAccess.getLetterAccess().getValueXKeyword_1_0()); }
		)
		{ after(grammarAccess.getLetterAccess().getValueXKeyword_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__OperatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getOperatorPartOperatorParserRuleCall_0_0()); }
		rulePartOperator
		{ after(grammarAccess.getNumberLiteralAccess().getOperatorPartOperatorParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NumberLiteral__ValueAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNumberLiteralAccess().getValueNumberTypesParserRuleCall_1_0()); }
		ruleNumberTypes
		{ after(grammarAccess.getNumberLiteralAccess().getValueNumberTypesParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
